/**
 * Wharf main API
 * Wharf backend API that manages data storage for projects, builds, providers, etc.
 *
 * OpenAPI spec version: local docker-compose
 * Contact: wharf@iver.se
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { MainBuildReferenceWrapper } from '../model/mainBuildReferenceWrapper';
import { MainPaginatedBuilds } from '../model/mainPaginatedBuilds';
import { MainProject } from '../model/mainProject';
import { ProblemResponse } from '../model/problemResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ProjectService {

    protected basePath = 'https://localhost/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Updates project.
     * It finds project by ID or if ID is set to 0 it takes group id, token id and name. First found project will have updated avatar, description and build definition
     * @param project project object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectPost(project: MainProject, observe?: 'body', reportProgress?: boolean): Observable<MainProject>;
    public projectPost(project: MainProject, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MainProject>>;
    public projectPost(project: MainProject, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MainProject>>;
    public projectPost(project: MainProject, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (project === null || project === undefined) {
            throw new Error('Required parameter project was null or undefined when calling projectPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<MainProject>(`${this.basePath}/project`,
            project,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete project with selected project ID
     * 
     * @param projectid project ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectProjectidDelete(projectid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public projectProjectidDelete(projectid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public projectProjectidDelete(projectid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public projectProjectidDelete(projectid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling projectProjectidDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/project/${encodeURIComponent(String(projectid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns project with selected project ID
     * 
     * @param projectid project ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectProjectidGet(projectid: number, observe?: 'body', reportProgress?: boolean): Observable<MainProject>;
    public projectProjectidGet(projectid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MainProject>>;
    public projectProjectidGet(projectid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MainProject>>;
    public projectProjectidGet(projectid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling projectProjectidGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<MainProject>(`${this.basePath}/project/${encodeURIComponent(String(projectid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Responsible for run stage environment for selected project
     * 
     * @param projectid project ID
     * @param stage name of stage to run, or specify ALL to run everything
     * @param branch branch name, uses default branch if omitted
     * @param environment environment name
     * @param inputs user inputs
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectProjectidStageRunPost(projectid: number, stage: string, branch?: string, environment?: string, inputs?: string, observe?: 'body', reportProgress?: boolean): Observable<MainBuildReferenceWrapper>;
    public projectProjectidStageRunPost(projectid: number, stage: string, branch?: string, environment?: string, inputs?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MainBuildReferenceWrapper>>;
    public projectProjectidStageRunPost(projectid: number, stage: string, branch?: string, environment?: string, inputs?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MainBuildReferenceWrapper>>;
    public projectProjectidStageRunPost(projectid: number, stage: string, branch?: string, environment?: string, inputs?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling projectProjectidStageRunPost.');
        }

        if (stage === null || stage === undefined) {
            throw new Error('Required parameter stage was null or undefined when calling projectProjectidStageRunPost.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (branch !== undefined && branch !== null) {
            queryParameters = queryParameters.set('branch', <any>branch);
        }
        if (environment !== undefined && environment !== null) {
            queryParameters = queryParameters.set('environment', <any>environment);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<MainBuildReferenceWrapper>(`${this.basePath}/project/${encodeURIComponent(String(projectid))}/${encodeURIComponent(String(stage))}/run`,
            inputs,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Adds project when not exists.
     * It finds project by ID or if ID is set to 0 it takes group name. First found project will be returned. If not found project will be added into database. It ignores branches array, build history and provider params.
     * @param project project object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectPut(project?: MainProject, observe?: 'body', reportProgress?: boolean): Observable<MainProject>;
    public projectPut(project?: MainProject, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MainProject>>;
    public projectPut(project?: MainProject, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MainProject>>;
    public projectPut(project?: MainProject, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<MainProject>(`${this.basePath}/project`,
            project,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all projects from database
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectsGet(observe?: 'body', reportProgress?: boolean): Observable<Array<MainProject>>;
    public projectsGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MainProject>>>;
    public projectsGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MainProject>>>;
    public projectsGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<MainProject>>(`${this.basePath}/projects`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get slice of builds.
     * 
     * @param projectid project ID
     * @param limit number of fetched branches
     * @param offset PK of last branch taken
     * @param orderby Sorting orders. Takes the property name followed by either &#39;asc&#39; or &#39;desc&#39;. Can be specified multiple times for more granular sorting. Defaults to &#39;?orderby&#x3D;buildId desc&#39;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectsProjectidBuildsGet(projectid: number, limit: string, offset: string, orderby?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<MainPaginatedBuilds>;
    public projectsProjectidBuildsGet(projectid: number, limit: string, offset: string, orderby?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MainPaginatedBuilds>>;
    public projectsProjectidBuildsGet(projectid: number, limit: string, offset: string, orderby?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MainPaginatedBuilds>>;
    public projectsProjectidBuildsGet(projectid: number, limit: string, offset: string, orderby?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectid === null || projectid === undefined) {
            throw new Error('Required parameter projectid was null or undefined when calling projectsProjectidBuildsGet.');
        }

        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling projectsProjectidBuildsGet.');
        }

        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling projectsProjectidBuildsGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (orderby) {
            orderby.forEach((element) => {
                queryParameters = queryParameters.append('orderby', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<MainPaginatedBuilds>(`${this.basePath}/projects/${encodeURIComponent(String(projectid))}/builds`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search for projects from database
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public projectsSearchPost(observe?: 'body', reportProgress?: boolean): Observable<Array<MainProject>>;
    public projectsSearchPost(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MainProject>>>;
    public projectsSearchPost(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MainProject>>>;
    public projectsSearchPost(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<Array<MainProject>>(`${this.basePath}/projects/search`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
