/**
 * Wharf main API
 * Wharf backend API that manages data storage for projects, builds, providers, etc.
 *
 * OpenAPI spec version: v5.0.0-rc.1
 * Contact: wharf@iver.se
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ProblemResponse } from '../model/problemResponse';
import { RequestBranch } from '../model/requestBranch';
import { RequestBranchListUpdate } from '../model/requestBranchListUpdate';
import { ResponseBranch } from '../model/responseBranch';
import { ResponseBranchList } from '../model/responseBranchList';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BranchService {

    protected basePath = 'https://localhost/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create or update branch.
     * It finds branch by project ID, token ID and name. First found branch will have updated default flag. If not existing new branch will be created.
     * @param branch branch object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createBranch(branch: RequestBranch, observe?: 'body', reportProgress?: boolean): Observable<ResponseBranch>;
    public createBranch(branch: RequestBranch, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseBranch>>;
    public createBranch(branch: RequestBranch, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseBranch>>;
    public createBranch(branch: RequestBranch, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branch === null || branch === undefined) {
            throw new Error('Required parameter branch was null or undefined when calling createBranch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResponseBranch>(`${this.basePath}/branch`,
            branch,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * NOT IMPLEMENTED YET
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBranchList(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getBranchList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getBranchList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getBranchList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/branches`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a branch by ID
     * This endpoint has not been implemented! Deprecated since v4.3.0. Planned for removal in v6.0.0.
     * @param branchId branch ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public oldGetBranch(branchId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public oldGetBranch(branchId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public oldGetBranch(branchId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public oldGetBranch(branchId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (branchId === null || branchId === undefined) {
            throw new Error('Required parameter branchId was null or undefined when calling oldGetBranch.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/branch/${encodeURIComponent(String(branchId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Resets branches for a project
     * For a given project, it will remove all branches unlisted in the request, and add all branches from the request that are missing in the database. Effectively resetting the list of branches to the list from the HTTP request body. Useful when used via the provider APIs when importing a project.
     * @param projectId project ID
     * @param branches Branch update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProjectBranchList(projectId: number, branches: RequestBranchListUpdate, observe?: 'body', reportProgress?: boolean): Observable<ResponseBranchList>;
    public updateProjectBranchList(projectId: number, branches: RequestBranchListUpdate, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseBranchList>>;
    public updateProjectBranchList(projectId: number, branches: RequestBranchListUpdate, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseBranchList>>;
    public updateProjectBranchList(projectId: number, branches: RequestBranchListUpdate, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling updateProjectBranchList.');
        }

        if (branches === null || branches === undefined) {
            throw new Error('Required parameter branches was null or undefined when calling updateProjectBranchList.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ResponseBranchList>(`${this.basePath}/project/${encodeURIComponent(String(projectId))}/branch`,
            branches,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
