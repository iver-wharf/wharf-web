/**
 * Wharf main API
 * Wharf backend API that manages data storage for projects, builds, providers, etc.
 *
 * OpenAPI spec version: v4.0.1
 * Contact: wharf@iver.se
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { MainBuild } from '../model/mainBuild';
import { MainBuildLog } from '../model/mainBuildLog';
import { MainLog } from '../model/mainLog';
import { ProblemResponse } from '../model/problemResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BuildService {

    protected basePath = 'https://localhost/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Finds build by build ID
     * 
     * @param buildid build id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public buildBuildidGet(buildid: number, observe?: 'body', reportProgress?: boolean): Observable<MainBuild>;
    public buildBuildidGet(buildid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MainBuild>>;
    public buildBuildidGet(buildid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MainBuild>>;
    public buildBuildidGet(buildid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (buildid === null || buildid === undefined) {
            throw new Error('Required parameter buildid was null or undefined when calling buildBuildidGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<MainBuild>(`${this.basePath}/build/${encodeURIComponent(String(buildid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds logs for build with selected build ID
     * 
     * @param buildid build id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public buildBuildidLogGet(buildid: number, observe?: 'body', reportProgress?: boolean): Observable<Array<MainLog>>;
    public buildBuildidLogGet(buildid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MainLog>>>;
    public buildBuildidLogGet(buildid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MainLog>>>;
    public buildBuildidLogGet(buildid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (buildid === null || buildid === undefined) {
            throw new Error('Required parameter buildid was null or undefined when calling buildBuildidLogGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<MainLog>>(`${this.basePath}/build/${encodeURIComponent(String(buildid))}/log`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Post a log to selected build
     * 
     * @param buildid build id
     * @param data data
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public buildBuildidLogPost(buildid: number, data: MainBuildLog, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public buildBuildidLogPost(buildid: number, data: MainBuildLog, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public buildBuildidLogPost(buildid: number, data: MainBuildLog, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public buildBuildidLogPost(buildid: number, data: MainBuildLog, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (buildid === null || buildid === undefined) {
            throw new Error('Required parameter buildid was null or undefined when calling buildBuildidLogPost.');
        }

        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling buildBuildidLogPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/build/${encodeURIComponent(String(buildid))}/log`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Partially update specific build
     * 
     * @param buildid build id
     * @param status Build status term
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public buildBuildidPut(buildid: number, status: 'Scheduling' | 'Running' | 'Completed' | 'Failed', observe?: 'body', reportProgress?: boolean): Observable<MainBuild>;
    public buildBuildidPut(buildid: number, status: 'Scheduling' | 'Running' | 'Completed' | 'Failed', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MainBuild>>;
    public buildBuildidPut(buildid: number, status: 'Scheduling' | 'Running' | 'Completed' | 'Failed', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MainBuild>>;
    public buildBuildidPut(buildid: number, status: 'Scheduling' | 'Running' | 'Completed' | 'Failed', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (buildid === null || buildid === undefined) {
            throw new Error('Required parameter buildid was null or undefined when calling buildBuildidPut.');
        }

        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling buildBuildidPut.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<MainBuild>(`${this.basePath}/build/${encodeURIComponent(String(buildid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Opens stream listener
     * 
     * @param buildid build id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public buildBuildidStreamGet(buildid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public buildBuildidStreamGet(buildid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public buildBuildidStreamGet(buildid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public buildBuildidStreamGet(buildid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (buildid === null || buildid === undefined) {
            throw new Error('Required parameter buildid was null or undefined when calling buildBuildidStreamGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/build/${encodeURIComponent(String(buildid))}/stream`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * NOT IMPLEMENTED YET
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public buildsSearchPost(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public buildsSearchPost(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public buildsSearchPost(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public buildsSearchPost(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/builds/search`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
